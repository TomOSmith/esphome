# Variables required
# ip:str   IP address of device

# Wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain
  fast_connect: false
  manual_ip:
    static_ip: ${ip}
    gateway: !secret gateway
    subnet: !secret subnet
    dns1: !secret dns

  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: !secret ap_password

# OTA
ota:

# API
api:
  encryption:
    key: !secret api_encryption_key

# WWW
# web_server:
#   port: 80

# MQTT
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password

# SNTP
time:
  - platform: sntp
    id: sntp_time
    timezone: !secret timezone
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

# Sun
sun:
  latitude: !secret latitude
  longitude: !secret longitude

## Diagnostics
sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_signal_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    internal: true
    entity_category: "diagnostic"

binary_sensor:
  - id: status_binary_sensor
    name: "Status"
    platform: status
    entity_category: diagnostic

  - id: api_connected
    name: "API Connected"
    platform: template
    entity_category: diagnostic
    lambda: return global_api_server->is_connected();

button:
  - id: restart_button
    name: "Restart"
    platform: restart
    entity_category: config

  - id: reset_button
    name: "Factory Reset"
    platform: factory_reset
    entity_category: config

  - id: safe_mode_button
    name: "Safe Mode"
    platform: safe_mode
    internal: false
    entity_category: config

text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      id: ssid
      name: "SSID"
      entity_category: "diagnostic"
    mac_address:
      id: mac_address
      name: "MAC Address"
      entity_category: "diagnostic"

  #  Creates a sensor showing when the device was last restarted
  - id: device_last_restart
    name: "Last Restart"
    platform: template
    icon: mdi:clock
    entity_category: diagnostic
    device_class: timestamp

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - id: device_uptime
    name: "Uptime"
    platform: template
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start
